<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" version="2.0">

  <channel>

      <title>Code, Nerdyness, and Nonsense</title>
      <link type="application/atom+xml" href="http://brandontreb.com/feed/" rel="self"/>
      <link>http://brandontreb.com</link>
    <lastBuildDate>2013-01-22T07:57:30-07:00</lastBuildDate>
    <language>en</language>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
      <updated>2013-01-22T07:57:30-07:00</updated>
      <id>http://brandontreb.com</id>
      <author>
          <name>brandontreb</name>
      </author>
      <rights>Copyright (c) 2010-2011 Brandon Trebitowski</rights>
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
        <item>
            <title>Beginning Jailbroken iOS Development - Your First Tweak</title>
            <link>http://brandontreb.com/beginning-jailbroken-ios-development-your-first-tweak//</link>
            <pubDate>2011-08-23T23:00:00-06:00</pubDate>
            <guid>http://brandontreb.com/beginning-jailbroken-ios-development-your-first-tweak//</guid>
            <description>&lt;p&gt;This is the 3rd installment of my jailbroken iOS development series.  If you haven&amp;#8217;t already, make sure you read the following tutorials to get up to speed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://brandontreb.com/beginning-jailbroken-ios-development-getting-the-tools/&quot;&gt;Beginning Jailbroken iOS Development - Getting The Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://brandontreb.com/beginning-jailbroken-ios-development-building-and-deployment/&quot;&gt;Beginning Jailbroken iOS Development - Building And Deployment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Today I&amp;#8217;m going to show you how to patch any internal Apple method that you want.  In this demo, we are going to hook into the init method of Springboard and show a UIAlertView upon starting your phone up.  It&amp;#8217;s not the &lt;em&gt;coolest&lt;/em&gt; of applications, but the design pattern and concepts used can be applied to patching any other internal method of any class.&lt;/p&gt;

&lt;h4&gt;Getting Set Up&lt;/h4&gt;

&lt;p&gt;In order to create a tweak, you must interface with Saurik&amp;#8217;s libsubstrate.dylib dynamic library.  This might come packaged with theos, but if not, you need to download a fresh copy. One can be found on this &lt;strong&gt;very spammy&lt;/strong&gt; site. &lt;a href=&quot;http://www.mediafire.com/?2upm53uzzj0488u&quot;&gt;Download libsubstrate.dylib&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have downloaded it, copy it to the folder /opt/theos/lib.  This is the folder where you will copy any other dynamic libraries that you might need to use in your application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The iOS Headers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most likely, theos came with the iOS headers that you need.  If not, you need to obtain them by doing a header dump on the device OR Googling around for them.  I suggest the latter as someone else has surely done the work for you.  Once you have these headers, you need to put them in the folder /opt/theos/include.  For this example you should have a folder in there called Springboard containing all of the Springboard headers.&lt;/p&gt;

&lt;h4&gt;Creating The Project&lt;/h4&gt;

&lt;p&gt;The process for creating the project is simple.  I&amp;#8217;m going to assume that you already have all of your environment variables in place that we discussed in the &lt;a href=&quot;http://brandontreb.com/beginning-jailbroken-ios-development-building-and-deployment/&quot;&gt;last tutorial&lt;/a&gt;.  If not, you will get errors.&lt;/p&gt;

&lt;p&gt;Open the console, cd into the directory where you want to create your application and type the following command to create a new Tweak application.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&#8217;bash&#8217;&gt;$THEOS/bin/nic.pl&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Now, when prompted select the number [5] for a tweak.  Next, you will enter all of the information about your project.  The resulting output should look like this:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&#8217;bash&#8217;&gt;NIC 1.0 - New Instance Creator
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;
  [1.] iphone/application
  [2.] iphone/library
  [3.] iphone/preference_bundle
  [4.] iphone/tool
  [5.] iphone/tweak
Choose a Template (required): 5
Project Name (required): WelcomeWagon 
Package Name [com.yourcompany.welcomewagon]:                 
Author/Maintainer Name [Brandon Trebitowski]: 
MobileSubstrate Bundle filter [com.apple.springboard]: 
Instantiating iphone/tweak in welcomewagon/&#8230;
Done.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h4&gt;The Tweaks File&lt;/h4&gt;

&lt;p&gt;Once your project has been created, you can open in up in your favorite editor.  I prefer TextMate.  Theos creates a file for you called Tweak.xm.  This is a special file that will run through theos&amp;#8217;s preprocessor in order to hook into the classes and methods that you specify.  So, rather than us having to write tons of boilerplate/crazy hook code, Theos does that all for us with a nice interface.&lt;/p&gt;

&lt;p&gt;By default, EVERYTHING in that file is commented out.  It took me longer than I care to admit to figure that out when I created my first Jailbroken iOS app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Preprocessor commands&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are a few commands that you need to know in order to hook into a class:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;%hook and %end&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&#8217;objc&#8217;&gt;%hook Springboard
// overwrite methods here
%end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The first command is called %hook followed by the name of the class you are hooking in to.  You choose the methods to overwrite within the context of %hook className and %end. In the above code, we are saying that we want to hook into some methods in the SpringBoard class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;%orig&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When inside a method, the %orig command will call the original method.  You can even pass arguments to the command like this %orig(arg1,arg2).  One thing to note is, if you don&amp;#8217;t call %orig, the original method will never be called.  So, if you hook SpringBoard&amp;#8217;s init command and fail to call %orig, SpringBoard will never start and your phone will be unusable until you delete your app via ssh.&lt;/p&gt;

&lt;h4&gt;Hooking Into Springboard&lt;/h4&gt;

&lt;p&gt;Open up Tweak.xm and add the following code.  Don&amp;#8217;t worry, I will explain it afterwards.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&#8217;objc&#8217;&gt;#import &amp;lt;SpringBoard/SpringBoard.h&amp;gt;

%hook SpringBoard

-(void)applicationDidFinishLaunching:(id)application {
    %orig;
    
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&amp;quot;Welcome&amp;quot; 
        message:@&amp;quot;Welcome to your iPhone Brandon!&amp;quot; 
        delegate:nil 
        cancelButtonTitle:@&amp;quot;Thanks&amp;quot; 
        otherButtonTitles:nil];
    [alert show];
    [alert release];
}

%end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;OK, so what&amp;#8217;s going on here.  First, we import the Springboard.h header.  This will allow us access to springboard.  Next, we tell the preprocessor to hook into the Springboard class.&lt;/p&gt;

&lt;p&gt;The method that we are overriding here is the applicationDidFinishLaunching: method.  This will of course fire right when SpringBoard starts up.  Notice that we make the %orig call.  If we omit this, our phone would never boot up properly as SpringBoard needs it&amp;#8217;s initialization method.&lt;/p&gt;

&lt;p&gt;Finally, we just throw up a UIAlertView.  Again, not too exciting, but you get the point.&lt;/p&gt;

&lt;h4&gt;Adding Additional Frameworks&lt;/h4&gt;

&lt;p&gt;If you were to type build to build this project at this point you would see an error like this:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&#8217;bash&#8217;&gt;Tweak.xm: In function ‘objc_object* $_ungrouped$SpringBoard$init(SpringBoard*, objc_selector*)’:
Tweak.xm:6: error: declaration of ‘objc_object* self’ shadows a parameter&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This is because we depend on the UIKit framework to show alerts.  In order to tell theos that we want to link in UIKit, we must create an addition to the Makefile.  Add the following line to your Makefile.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&#8217;bash&#8217;&gt;WelcomeWagon_FRAMEWORKS = UIKit&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This will ensure that UIKit gets linked in.&lt;/p&gt;

&lt;h4&gt;Building, Packaging, And Installing&lt;/h4&gt;

&lt;p&gt;In the terminal, cd into your project&amp;#8217;s directory.  At this point, you can type make to simply build your project.  Theos has provided a nice way to automatically install your library on your device.  In order for it to work you must have the THEOS_DEVICE_IP environment variable set to your iPhone/iPod&amp;#8217;s IP address. This is explained in the &lt;a href=&quot;http://brandontreb.com/beginning-jailbroken-ios-development-building-and-deployment/&quot;&gt;previous tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the terminal type:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&#8217;bash&#8217;&gt;make install&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This will build your tweak and install it on your device. When prompted to enter your password, the default is &amp;#8220;alpine&amp;#8221;.  Also, make sure that SSH is installed on your device.&lt;/p&gt;

&lt;p&gt;After installation, your device will respring and you will be greeted with your custom message like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://f.cl.ly/items/3J1W0j0c1F3y081P2D2i/IMG_0001.PNG&quot; alt=&quot;Jailbroken App Development&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;You should now have a basic understand of how to patch any method inside of iOS.  With this knowledge, you can customize ANYTHING that you don&amp;#8217;t like about the device.  If you have any questions or comments, feel free to leave them in the comments section of this post.&lt;/p&gt;

&lt;p&gt;You can download the source code for this tutorial &lt;a href=&quot;http://cl.ly/1u0l0U0y2I0T1g2s3D0O&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Jailbreaking!&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-family: &#8216;Lucida Grande&#8217;;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;&lt;span style=&quot;font-family: arial, verdana, tahoma, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;em&gt;﻿﻿This post is part of &lt;a style=&quot;text-decoration: none; color: #004199; padding: 0px; margin: 0px;&quot; href=&quot;http://idevblogaday.com/&quot;&gt;iDevBlogADay&lt;/a&gt;, a group of indie iOS development blogs featuring two posts per day. You can keep up with iDevBlogADay through the &lt;a style=&quot;text-decoration: none; color: #004199; padding: 0px; margin: 0px;&quot; href=&quot;http://idevblogaday.com/&quot;&gt;web site&lt;/a&gt;, &lt;a style=&quot;text-decoration: none; color: #004199; padding: 0px; margin: 0px;&quot; href=&quot;http://feeds.feedburner.com/idevblogaday&quot;&gt;RSS feed&lt;/a&gt;, or &lt;a style=&quot;text-decoration: none; color: #004199; padding: 0px; margin: 0px;&quot; href=&quot;http://twitter.com/#search?q=%23idevblogaday&quot;&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
        <category>iDevBlogADay</category>
            </item>
            
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
        <item>
            <title>AppBlogger: A Tool For iOS App Developers And Bloggers</title>
            <link>http://brandontreb.com/appblogger-a-tool-for-ios-app-developers-and-bloggers//</link>
            <pubDate>2011-01-13T12:42:17-07:00</pubDate>
            <guid>http://brandontreb.com/appblogger-a-tool-for-ios-app-developers-and-bloggers//</guid>
            <description>&lt;p&gt;Imagine that you have just found the coolest app in the world and just can&amp;#8217;t wait to tell all of your followers about it.  So, you head to the admin panel of your blogging engine (hopefully &lt;a href=&quot;http://wpwithlove.com&quot;&gt;Wordpress&lt;/a&gt;) and begin to write your review.  Now, you want to insert some screenshots, icons, descriptions, app store links, etc&amp;#8230; So, what do you do?  You head on over to Bing and type in google.com.  Next, you search your app name and hopefully find the iTunes URL so that you can slowly grab some information about the app. &lt;span style=&quot;color: #ff0000;&quot;&gt;#Fail&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Dum duh dum duh (trumpet noises)!&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&quot;http://brandontreb.com/apps/appBlogger&quot; target=&quot;_blank&quot;&gt;AppBlogger&lt;/a&gt;.  &lt;a href=&quot;http://brandontreb.com/apps/appBlogger&quot; target=&quot;_blank&quot;&gt;AppBlogger&lt;/a&gt; is a little tool that I have been working on that uses &amp;#8220;Instant Search&amp;#8221; technology (jquery fanciness) to allow you to instantly search the app store and &lt;strong&gt;quickly&lt;/strong&gt; get the information you need.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://brandontreb.com/apps/appBlogger/&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-1383&quot; title=&quot;Screen shot 2011-01-13 at 7.17.04 PM&quot; src=&quot;http://brandontreb.com/wp-content/uploads/2011/01/Screen-shot-2011-01-13-at-7.17.04-PM.png&quot; alt=&quot;&quot; width=&quot;539&quot; height=&quot;468&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How Does It Work?&lt;/strong&gt; (you say)&lt;/p&gt;

&lt;p&gt;As you start typing, &lt;a href=&quot;http://brandontreb.com/apps/appBlogger/&quot; target=&quot;_blank&quot;&gt;AppBlogger&lt;/a&gt; makes an asynchronous request to the iTunes web service and pulls a list of applications that match your search terms.  This list is presented as a bunch of icons.  You will then click on one of these icons to pull of the details page of that application.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;size-full wp-image-1387 alignleft&quot; title=&quot;Screen shot 2011-01-13 at 7.25.52 PM&quot; src=&quot;http://brandontreb.com/wp-content/uploads/2011/01/Screen-shot-2011-01-13-at-7.25.52-PM.png&quot; alt=&quot;&quot; width=&quot;219&quot; height=&quot;227&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The details page (see above screenshot) then contains everything you need to write a stellar blog post about that application.  It provides text fields (for easy copy and paste) with icon URLs, download URL, and screenshot URLs.&lt;/p&gt;

&lt;p&gt;I have some plans to integrate this in the &lt;em&gt;near&lt;/em&gt; future with my &lt;a href=&quot;http://brandontreb.com/apps/linkshare&quot;&gt;Link Share&lt;/a&gt; tool to auto generate shortened URLs that contain your affiliate code (so you can make $).  If you have any other suggestions for it, I would love to hear them.&lt;/p&gt;

&lt;p&gt;I know many of you are heartbroken and were expecting the next iteration of my &lt;a href=&quot;http://brandontreb.com/creating-a-twitter-client-for-osx-part-1/&quot;&gt;Twitter Client For Mac&lt;/a&gt; series.  I want you to know, you are not forgotten and I will continue the series next Thursday.  So Stay Tuned!&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&quot;http://brandontreb.com/apps/appBlogger&quot;&gt;AppBlogger&lt;/a&gt;!&lt;/p&gt;

&lt;div style=&quot;font-family: &#8216;Lucida Grande&#8217;;&quot;&gt;&lt;span style=&quot;font-family: &#8216;Lucida Grande&#8217;;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;&lt;span style=&quot;font-family: arial, verdana, tahoma, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;em&gt;﻿﻿This post is part of &lt;a style=&quot;text-decoration: none; color: #004199; padding: 0px; margin: 0px;&quot; href=&quot;http://idevblogaday.com/&quot;&gt;iDevBlogADay&lt;/a&gt;, a group of indie iOS development blogs featuring two posts per day. You can keep up with iDevBlogADay through the &lt;a style=&quot;text-decoration: none; color: #004199; padding: 0px; margin: 0px;&quot; href=&quot;http://idevblogaday.com/&quot;&gt;web site&lt;/a&gt;, &lt;a style=&quot;text-decoration: none; color: #004199; padding: 0px; margin: 0px;&quot; href=&quot;http://feeds.feedburner.com/idevblogaday&quot;&gt;RSS feed&lt;/a&gt;, or &lt;a style=&quot;text-decoration: none; color: #004199; padding: 0px; margin: 0px;&quot; href=&quot;http://twitter.com/#search?q=%23idevblogaday&quot;&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;

</description>
        <category>iDevBlogADay</category>
            </item>
            
      
        
        <item>
            <title>Image Manipulation: Retrieving And Updating Pixel Values For A UIImage</title>
            <link>http://brandontreb.com/image-manipulation-retrieving-and-updating-pixel-values-for-a-uiimage//</link>
            <pubDate>2011-01-06T10:15:58-07:00</pubDate>
            <guid>http://brandontreb.com/image-manipulation-retrieving-and-updating-pixel-values-for-a-uiimage//</guid>
            <description>&lt;div id=&quot;attachment_1371&quot; class=&quot;wp-caption alignright&quot; style=&quot;width: 410px&quot;&gt;&lt;a href=&quot;http://brandontreb.com/wp-content/uploads/2011/01/jobs.png&quot;&gt;&lt;img class=&quot;size-full wp-image-1371 &quot; title=&quot;jobs&quot; src=&quot;http://brandontreb.com/wp-content/uploads/2011/01/jobs.png&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;224&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Grayscale Jobs&lt;/p&gt;&lt;/div&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;With the recent success of cool photo manipulation apps such as Camera+ and Instagram, it got me wondering.  How do these photo apps modify the pixel data of the image.&lt;/p&gt;

&lt;p&gt;After doing a bit of research on the subject, I found countless posts on Stack Overflow and the Developer forums about various methods to get and set the pixel values of a UIImage.  Most of them unanswered or partially answered.  I tested out many solutions and banged my head on my computer into the whee hours of the morning with no success.  Every solution I tried seemed to completely destroy the image.&lt;/p&gt;

&lt;p&gt;It wasn&amp;#8217;t until this morning, I had an &amp;#8220;aha&amp;#8221; moment, changed one line of code and was able to produce a grayscale version of a UIImage.&lt;/p&gt;

&lt;p&gt;Having the ability to get and set pixel values of a UIImage is super important if you want to create a photo related app that has &amp;#8220;Filters&amp;#8221;.  Once you know the basics, you can apply your ninja math skillz to implement cool filter algorithms on the pixels.  Below, I will show you onc such algorithm for converting an image to grayscale (it&amp;#8217;s not &lt;em&gt;that&lt;/em&gt; clever).&lt;/p&gt;

&lt;p&gt;I should note, that a good majority of my code comes from Olie&amp;#8217;s solution on this &lt;a href=&quot;http://stackoverflow.com/questions/448125/how-to-get-pixel-data-from-a-uiimage-cocoa-touch-or-cgimage-core-graphics&quot;&gt;Stack Overflow post&lt;/a&gt;.  His example simply returns and array of UIColor objects for a given image.  Mine will modify those colors and write them back to a UIImage.&lt;/p&gt;

&lt;h4&gt;Converting A UIImage Into A Pixel Array&lt;/h4&gt;


&lt;p&gt;Here is the first part of our grayscale method.  It is creating a char array from a global UIImage property named workingImage.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&#8217;objc&#8217;&gt;- (IBAction) grayscale:(id) sender {
    CGContextRef ctx;
    CGImageRef imageRef = [self.workingImage CGImage];
    NSUInteger width = CGImageGetWidth(imageRef);
    NSUInteger height = CGImageGetHeight(imageRef);
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    unsigned char *rawData = malloc(height * width * 4);
    NSUInteger bytesPerPixel = 4;
    NSUInteger bytesPerRow = bytesPerPixel * width;
    NSUInteger bitsPerComponent = 8;
    CGContextRef context = CGBitmapContextCreate(rawData, width, height,
    bitsPerComponent, bytesPerRow, colorSpace,
    kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);
    CGColorSpaceRelease(colorSpace);

    CGContextDrawImage(context, CGRectMake(0, 0, width, height), imageRef);
    CGContextRelease(context);
    .
    .
    .&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This is a lot of Core Graphics fanciness that isn&amp;#8217;t super important to understand.  It&amp;#8217;s just getting the RGBA values from the image and writing them into the rawData char array.  There are 4 bytes per pixel (red, green, blue, alpha), so this array contains 4 * height * width elements.&lt;/p&gt;

&lt;h4&gt;Modifying The Pixels of a UIImage&lt;/h4&gt;


&lt;p&gt;Here is where the magic happens.  You can replace this code with the logic necessary to apply the filter you are making.  Another clever way to approach this would be to pass this code in as a block into the method (I&amp;#8217;ll leave that as an exercise for the reader :)).&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&#8217;objc&#8217;&gt;.
.
.
    int byteIndex = 0;
    for (int ii = 0 ; ii &amp;amp;lt; width * height ; ++ii)
    {
    int outputColor = (rawData[byteIndex] + rawData[byteIndex+1] +
        rawData[byteIndex+2]) / 3;

    rawData[byteIndex] = (char) (outputColor);
    rawData[byteIndex+1] = (char) (outputColor);
    rawData[byteIndex+2] = (char) (outputColor);

        byteIndex += 4;
    }

.
.
.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The first part is pretty straight forward, we have a for loop that goes from 0 to width * height.  We index into the rawData array using a counter that we increment by 4 each time (remember 4 bytes per pixel).  As you can imagine, the first pixel (rawData[byteIndex]) represents the red pixel, then green for +1, blue for +2, and finally alpha for +3.  Note that the alpha byte is last because kCGImageAlphaPremultipliedLast flag above.&lt;/p&gt;

&lt;p&gt;In order to do grayscale, we simple set all of the color values to the average color value.  So, for example the color [218,232,244] (which is the light blue color of the Wordpress editor&amp;#8217;s toolbar) would be converted to [231,231,231] which is a fairly light gray color.&lt;/p&gt;

&lt;p&gt;The most important step that everyone in the forums seemed to miss was casting the new value to a char.  Remember we are using a char array, setting ints as values will generally screw up your image. (This was my &amp;#8220;aha&amp;#8221; moment that I mentioned above)&lt;/p&gt;

&lt;h4&gt;Writing The Pixels Back To a UIImage&lt;/h4&gt;


&lt;p&gt;The final step is to write the pixel data back to a UIImage.  Again, I borrowed some of this code from somewhere else and unfortunately lost the link.  If I find it, I will update the post.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&#8217;objc&#8217;&gt;.
.
.
    ctx = CGBitmapContextCreate(rawData,
        CGImageGetWidth( imageRef ),
        CGImageGetHeight( imageRef ),
        8,
        CGImageGetBytesPerRow( imageRef ),
        CGImageGetColorSpace( imageRef ),
        kCGImageAlphaPremultipliedLast ); 

    imageRef = CGBitmapContextCreateImage (ctx);
    UIImage* rawImage = [UIImage imageWithCGImage:imageRef];  

    CGContextRelease(ctx);  

    self.workingImage = rawImage;  

    free(rawData);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;All we are doing here is creating a new Bitmap Context, writing it to our CGImageRef and constructing a new UIImage from that CGImageRef. Finally, we just update our workingImage with the modified one.  Fancy, I know&amp;#8230;&lt;/p&gt;

&lt;p&gt;Now, much of this code is to work with my example (download below), but it could easily be tweaked to fit within your super awesome photo app.  If you have any questions or comments PLEASE leave them here or send them to me on Twitter (but probably leave them here ;) ).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://brandontreb.com/wp-content/uploads/2011/01/ImageManip.zip&quot;&gt;Download The Sample Source Project&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note on the sample code: Before you give me crap about doing this in the main thread, I know.  Don&amp;#8217;t do these operation on the main thread.  The example is meant to be quick and dirty and by no means is ready for production. Enjoy!&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;span style=&quot;font-family: &#8216;Lucida Grande&#8217;;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;&lt;span style=&quot;font-family: arial, verdana, tahoma, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;em&gt;﻿﻿This post is part of &lt;a style=&quot;text-decoration: none; color: #004199; padding: 0px; margin: 0px;&quot; href=&quot;http://idevblogaday.com/&quot;&gt;iDevBlogADay&lt;/a&gt;, a group of indie iOS development blogs featuring two posts per day. You can keep up with iDevBlogADay through the &lt;a style=&quot;text-decoration: none; color: #004199; padding: 0px; margin: 0px;&quot; href=&quot;http://idevblogaday.com/&quot;&gt;web site&lt;/a&gt;, &lt;a style=&quot;text-decoration: none; color: #004199; padding: 0px; margin: 0px;&quot; href=&quot;http://feeds.feedburner.com/idevblogaday&quot;&gt;RSS feed&lt;/a&gt;, or &lt;a style=&quot;text-decoration: none; color: #004199; padding: 0px; margin: 0px;&quot; href=&quot;http://twitter.com/#search?q=%23idevblogaday&quot;&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
        <category>iDevBlogADay</category>
            </item>
            
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
        <item>
            <title>Promoting Your Other Apps Within Your Apps</title>
            <link>http://brandontreb.com/promoting-your-other-apps-within-your-apps//</link>
            <pubDate>2010-11-25T05:09:56-07:00</pubDate>
            <guid>http://brandontreb.com/promoting-your-other-apps-within-your-apps//</guid>
            <description>&lt;p&gt;First off, Happy Thanksgiving to my American readers. And a happy Thursday to everyone else.  I&amp;#8217;m sitting here on Thursday morning drinking coffee and eating Sticky Buns (kind of like gooey doughnuts).  It&amp;#8217;s been a hectic week of family and travel, so please forgive me if this is not the most verbose post.&lt;/p&gt;

&lt;p&gt;Showing your other applications within each of your applications (wow, the word application is starting to lose meaning) can have a tremendous impact on your sales.  It&amp;#8217;s a great way to promote your other apps for free and will give them much more exposure across a wider audience.  Moving all of the promotion logic out to the web allows you to dynamically add and remove apps from the view without updating your apps in the store.&lt;/p&gt;

&lt;p&gt;[Insert Cool Graph Backing This Statement Up Here]  //I&amp;#8217;m not that cool yet :(&lt;/p&gt;

&lt;p&gt;We have seen this in many popular apps.  Here is a screenshot from an iDevBlogADay veteran &lt;a href=&quot;http://www.streamingcolour.com/blog/&quot;&gt;Owen Goss&lt;/a&gt; promoting his other applications from inside of &lt;a href=&quot;http://www.streamingcolour.com/games/landformer/&quot;&gt;LandFormer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://brandontreb.com/wp-content/uploads/2010/11/promo.png&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-1080&quot; title=&quot;promo&quot; src=&quot;http://brandontreb.com/wp-content/uploads/2010/11/promo-500x333.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;200&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are going to learn how to make something similar and I will provide you with a web template as well as the view controller to load it.&lt;/p&gt;

&lt;h4&gt;Download The Template&lt;/h4&gt;


&lt;p&gt;So, I&amp;#8217;m sure there are a million more &amp;#8220;elegant&amp;#8221; ways to display your apps, but I went for super simple.  So, 1337 web dev idevblogadayers, please go easy on me in the comments.  Download the code below and look in the Web folder.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://brandontreb.com/wp-content/uploads/2010/11/promotion2.zip&quot;&gt;Download The Code Files Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a screenshot of what the template will look like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://brandontreb.com/wp-content/uploads/2010/11/Screen-shot-2010-11-25-at-11.51.07-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-1085&quot; title=&quot;Screen shot 2010-11-25 at 11.51.07 AM&quot; src=&quot;http://brandontreb.com/wp-content/uploads/2010/11/Screen-shot-2010-11-25-at-11.51.07-AM-500x266.png&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;213&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will also work in portrait mode.&lt;/p&gt;

&lt;h4&gt;Upload The Template Files To Your Web Server And Replace My Sample Data&lt;/h4&gt;


&lt;p&gt;If you have your own website (which you probably should ;) ), upload the template files to a subdirectory.  If not, or you don&amp;#8217;t want to waste bandwidth on it, you can always &lt;a href=&quot;http://wiki.dropbox.com/TipsAndTricks/HostWebsites&quot;&gt;host the files on Dropbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, upload your icons (the template auto rounds the corners so you can just use the one&amp;#8217;s bundled with your app) and replace my sample images with yours.&lt;/p&gt;

&lt;p&gt;Finally, replace the URL&amp;#8217;s with the URLs to your applications. You can also add/remove table cells to match the number of applications you are promoting.&lt;/p&gt;

&lt;h4&gt;Add The Promotion Code To Your iPhone App&lt;/h4&gt;


&lt;p&gt;Look in the iPhone folder from the unzipped file you downloaded above and copy the following 3 files into your project:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;PromotionViewController.m&lt;/li&gt;
    &lt;li&gt;PromotionViewController.h&lt;/li&gt;
    &lt;li&gt;PromotionViewController.xib&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Check the box to copy them into your project folder when prompted.&lt;/p&gt;

&lt;p&gt;We will now take a look at how to display the promotion view when a button is clicked.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&#8217;objc&#8217;&gt;- (IBAction) moreAppsTouched:(id) sender {
    PromotionViewController *controller = [[PromotionViewController alloc]
        initWithNibName:@&amp;quot;PromotionViewController&amp;quot;
        bundle:[NSBundle mainBundle]];
    controller.promotionAddress = @&amp;quot;http://brandontreb.com/apps/idevblogaday/promotion.html&amp;quot;;
    [self presentModalViewController:controller animated:YES];
    [controller release];
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Make sure you set controller.promotionAddress to the web address of your promotion.html file.&lt;/p&gt;

&lt;p&gt;And there you have it!  When the user tapps on a button it will display our promotion view modally and will load up your promo page.  I have provided a sample application that pulls up the promotion view when a button has been clicked.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://brandontreb.com/wp-content/uploads/2010/11/PromotionTest1.zip&quot;&gt;Download The Sample App Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions or comments, feel free to leave them in the comments.&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

&lt;p style=&quot;font-family: &#8216;Lucida Grande&#8217;;&quot;&gt;&amp;#8212;-&lt;/p&gt;


&lt;p&gt;&lt;/p&gt;

&lt;div style=&quot;font-family: &#8216;Lucida Grande&#8217;;&quot;&gt;&lt;span style=&quot;font-family: &#8216;Lucida Grande&#8217;;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;&lt;span style=&quot;font-family: arial, verdana, tahoma, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;em&gt;﻿﻿This post is part of &lt;a style=&quot;text-decoration: none; color: #004199; padding: 0px; margin: 0px;&quot; href=&quot;http://idevblogaday.com/&quot;&gt;iDevBlogADay&lt;/a&gt;, a group of indie iOS development blogs featuring two posts per day. You can keep up with iDevBlogADay through the &lt;a style=&quot;text-decoration: none; color: #004199; padding: 0px; margin: 0px;&quot; href=&quot;http://idevblogaday.com/&quot;&gt;web site&lt;/a&gt;, &lt;a style=&quot;text-decoration: none; color: #004199; padding: 0px; margin: 0px;&quot; href=&quot;http://feeds.feedburner.com/idevblogaday&quot;&gt;RSS feed&lt;/a&gt;, or &lt;a style=&quot;text-decoration: none; color: #004199; padding: 0px; margin: 0px;&quot; href=&quot;http://twitter.com/#search?q=%23idevblogaday&quot;&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;


&lt;p&gt;&lt;/p&gt;

&lt;div style=&quot;font-family: &#8216;Lucida Grande&#8217;;&quot;&gt;&lt;span style=&quot;font-family: &#8216;Lucida Grande&#8217;;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;&lt;span style=&quot;font-family: arial, verdana, tahoma, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;em&gt;&lt;br /&gt; 
&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;


&lt;p&gt;&lt;/p&gt;
</description>
        <category>iDevBlogADay</category>
            </item>
            
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
  </channel>
</rss>