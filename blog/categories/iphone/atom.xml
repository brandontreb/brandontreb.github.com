<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iPhone | Brandon Trebitowski]]></title>
  <link href="http://brandontreb.com/blog/categories/iphone/atom.xml" rel="self"/>
  <link href="http://brandontreb.com/"/>
  <updated>2013-01-22T07:57:30-07:00</updated>
  <id>http://brandontreb.com/</id>
  <author>
    <name><![CDATA[Brandon Trebitowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[5 Third Party iOS Libraries I Have Found Useful Lately]]></title>
    <link href="http://brandontreb.com/five-third-party-libraries/"/>
    <updated>2012-08-24T00:00:00-06:00</updated>
    <id>http://brandontreb.com/five-third-party-libraries</id>
    <content type="html"><![CDATA[<p>As I mature as a developer, I try to rely on other people's code more an more.  Why build something from scratch when a solution already exists that you can fit in your project.  In <a href="http://itunes.apple.com/us/app/pocket-mud-pro/id511678455?mt=8">Pocket MUD Pro</a>, I used <strong>13</strong> 3rd party libraries and am using quite a bit more in the project that I'm currently working on.  I figured that I would share some of the libraries that I have been using so that it might save you some time in the future.</p>

<h2>1. CocoaAsyncSocket</h2>

<p><strong>Link:</strong> <a href="https://github.com/robbiehanson/CocoaAsyncSocket">https://github.com/robbiehanson/CocoaAsyncSocket</a></p>

<p>Many of my applications involve TCP or UDP networking. There is a lot of boiler plate code involved in every networked application, and CocoaAsyncSocket solves much of that for you.</p>

<h2>2. Appirater</h2>

<p><strong>Link:</strong> <a href="http://github.com/arashpayan/appirater/">http://github.com/arashpayan/appirater/</a></p>

<p><img src="http://arashpayan.com/blog/wp-content/uploads/2009/09/AppiraterScreenshot.png" alt="Screenshot" /></p>

<p>Hopefully, you have heard of this one or a similar library by now.  It's very challenging to get users to want to review your applications, let alone give you a positive review.  AppiRater allows you to prompt a user to rate your application based on either number of launches or "significant events" which you specify.</p>

<h2>3. Zip Archive</h2>

<p><strong>Link:</strong> <a href="http://code.google.com/p/ziparchive/">http://code.google.com/p/ziparchive/</a></p>

<p>I try to ship small applications that download assets upon launch.  A good way to send these assets over the wire is to zip them up and stick them on your server.  I have written an article about this on <a href="http://www.icodeblog.com/2012/08/13/unzipping-files-using-zip-archive/">iCodeBlog</a>.</p>

<h2>4. Quick Dialog</h2>

<p><strong>Link: </strong> <a href="https://github.com/escoz/QuickDialog">https://github.com/escoz/QuickDialog</a></p>

<p>Creating forms in iOS is pretty painful. It usually involves custom table cells and a lot of delegate nonsense.  QuickDialog takes away some of this pain and allows you to easily create iOS forms.  You can even design them using JSON.</p>

<p><img src="https://github.com/escoz/QuickDialog/raw/master/other/quickdialog2.png" alt="QuickDialog Screenshot" /></p>

<h2>5. TSMiniWebBrowser</h2>

<p><strong>Link:</strong> <a href="https://github.com/tonisalae/TSMiniWebBrowser">https://github.com/tonisalae/TSMiniWebBrowser</a></p>

<p>Often times, you want a quick and dirty browser in your application.  I generally use it to point to in-app documentation or take the user to a page after tapping on a link. It's quick and easy.</p>

<p><img src="https://a248.e.akamai.net/camo.github.com/1cae2dfc9160aa6a8e0583d0682d78462c97d60f/687474703a2f2f646c2e64726f70626f782e636f6d2f752f373630343232322f4769744875622f54534d696e6957656242726f777365722f73686f745f30315f7468756d622e706e67" alt="Screenshot" /></p>

<p>I hope you find some value in this list.  I'd love to hear about the libraries <strong>you</strong> use frequently.</p>

<p>Happy Coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's Your Cruising Speed?]]></title>
    <link href="http://brandontreb.com/whats-your-cruising-speed/"/>
    <updated>2011-10-04T20:20:00-06:00</updated>
    <id>http://brandontreb.com/whats-your-cruising-speed</id>
    <content type="html"><![CDATA[<center><img src="http://f.cl.ly/items/3i3A3o3o0M3O1I3G3K3M/2009-porsche-911-carrera-19_460x0w.jpg"></center>


<p>Earlier this year, I launched an application called <a href="http://itunes.apple.com/us/app/smart-lockscreen-creator/id419890996?mt=8">Smart Lockscreen Creator</a>.  It was a pretty simple app that allowed you to add dynamic data (such as weather) to your wallpaper and save it back out to your camera roll.  The idea is to improve the functionality of the user's lockscreen.  It did very well on launch (and even made it to #1 in the Israel App Store).  At the peak, I was selling about 600 copies per day.</p>

<p>Well, the honeymoon period is over and sales have slowed down <strong>quite a bit</strong>, however they have completely stabilized around what I'm calling the "cruising speed".  So, what's my speed?  On an average day, I will sell between 10-15 copies of the application per day.  This is with no additional marketing, I'm not on any top 500 pages, and honestly I haven't done much to the application at all.   The app even has ~2 star rating.  Not because it sucks, but because people don't read the description and assume it will constantly update their lockscreen.</p>

<p>I have asked a few developers and this seems to be a fairly common cruising speed.  So, now I'm asking you.</p>

<p><strong>What's YOUR cruising speed?</strong></p>

<p><strong>Do you think updating the application will affect this speed?</strong></p>

<p><strong>What dictates the speed?</strong></p>

<p>I'd love to hear your responses in the comments.</p>

<p><span style="font-family: 'Lucida Grande';"><strong><span style="font-weight: normal;"><span style="font-family: arial, verdana, tahoma, sans-serif; font-size: 13px; line-height: 20px;"><em>﻿﻿This post is part of <a style="text-decoration: none; color: #004199; padding: 0px; margin: 0px;" href="http://idevblogaday.com/">iDevBlogADay</a>, a group of indie iOS development blogs featuring two posts per day. You can keep up with iDevBlogADay through the <a style="text-decoration: none; color: #004199; padding: 0px; margin: 0px;" href="http://idevblogaday.com/">web site</a>, <a style="text-decoration: none; color: #004199; padding: 0px; margin: 0px;" href="http://feeds.feedburner.com/idevblogaday">RSS feed</a>, or <a style="text-decoration: none; color: #004199; padding: 0px; margin: 0px;" href="http://twitter.com/#search?q=%23idevblogaday">Twitter</a>.</em></span></span></strong></span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Join Me At The Voices That Matter iOS Conference]]></title>
    <link href="http://brandontreb.com/join-me-at-the-voices-that-matter-conference/"/>
    <updated>2011-09-06T22:00:00-06:00</updated>
    <id>http://brandontreb.com/join-me-at-the-voices-that-matter-conference</id>
    <content type="html"><![CDATA[<p><img width="540" src="http://ios2011.voicesthatmatter.com/attachments/0002/0659/topright.gif"></p>

<p>In November, I will be attending the <a href="http://ios2011.voicesthatmatter.com/">Voices That Matter iOS Developers conference</a>.  It will be my third time attending, and I can't recommend it enough. One major change from this year however is, I will be attending as a sponsor.  A new company/project (currently in private alpha) will be participating as a sponsor at the conference.</p>

<p>We intend to have a table set up with multiple computers and devices so you can check out our product first hand.  Bleh, that sounds kind of spammy.  But, we have been working on something incredibly killer and I can't wait to share it with all of you.</p>

<p><strong>If YOU are planning on attending the conference</strong>, please comment on this post, <a href="http://twitter.com/brandontreb">write me on Twitter</a>, or email me.  I'd love to set up a one on one time to give you the full demo.</p>

<p>Also, I'm sure many of you already have a discount code, but if not, I have a pretty sweet promo code for $100!</p>

<h4>BSTBLOG</h4>

<p>Enter that at checkout.  Combining that with the "Early Bird Pricing", you save $300! Not a bad deal.</p>

<p>So, if you do end up coming (you are crazy not to), please communicate with me.  At least to say hi, you don't <em>have</em> to here my super awesome sales spiel if you don't want to...</p>

<p>Happy Coding!</p>

<p><span style="font-family: 'Lucida Grande';"><strong><span style="font-weight: normal;"><span style="font-family: arial, verdana, tahoma, sans-serif; font-size: 13px; line-height: 20px;"><em>﻿﻿This post is part of <a style="text-decoration: none; color: #004199; padding: 0px; margin: 0px;" href="http://idevblogaday.com/">iDevBlogADay</a>, a group of indie iOS development blogs featuring two posts per day. You can keep up with iDevBlogADay through the <a style="text-decoration: none; color: #004199; padding: 0px; margin: 0px;" href="http://idevblogaday.com/">web site</a>, <a style="text-decoration: none; color: #004199; padding: 0px; margin: 0px;" href="http://feeds.feedburner.com/idevblogaday">RSS feed</a>, or <a style="text-decoration: none; color: #004199; padding: 0px; margin: 0px;" href="http://twitter.com/#search?q=%23idevblogaday">Twitter</a>.</em></span></span></strong></span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginning Jailbroken iOS Development - Your First Tweak]]></title>
    <link href="http://brandontreb.com/beginning-jailbroken-ios-development-your-first-tweak/"/>
    <updated>2011-08-23T23:00:00-06:00</updated>
    <id>http://brandontreb.com/beginning-jailbroken-ios-development-your-first-tweak</id>
    <content type="html"><![CDATA[<p>This is the 3rd installment of my jailbroken iOS development series.  If you haven't already, make sure you read the following tutorials to get up to speed.</p>

<ul>
<li><a href="http://brandontreb.com/beginning-jailbroken-ios-development-getting-the-tools/">Beginning Jailbroken iOS Development - Getting The Tools</a></li>
<li><a href="http://brandontreb.com/beginning-jailbroken-ios-development-building-and-deployment/">Beginning Jailbroken iOS Development - Building And Deployment</a></li>
</ul>


<p>Today I'm going to show you how to patch any internal Apple method that you want.  In this demo, we are going to hook into the init method of Springboard and show a UIAlertView upon starting your phone up.  It's not the <em>coolest</em> of applications, but the design pattern and concepts used can be applied to patching any other internal method of any class.</p>

<h4>Getting Set Up</h4>

<p>In order to create a tweak, you must interface with Saurik's libsubstrate.dylib dynamic library.  This might come packaged with theos, but if not, you need to download a fresh copy. One can be found on this <strong>very spammy</strong> site. <a href="http://www.mediafire.com/?2upm53uzzj0488u">Download libsubstrate.dylib</a></p>

<p>Once you have downloaded it, copy it to the folder /opt/theos/lib.  This is the folder where you will copy any other dynamic libraries that you might need to use in your application.</p>

<p><strong>The iOS Headers</strong></p>

<p>Most likely, theos came with the iOS headers that you need.  If not, you need to obtain them by doing a header dump on the device OR Googling around for them.  I suggest the latter as someone else has surely done the work for you.  Once you have these headers, you need to put them in the folder /opt/theos/include.  For this example you should have a folder in there called Springboard containing all of the Springboard headers.</p>

<h4>Creating The Project</h4>

<p>The process for creating the project is simple.  I'm going to assume that you already have all of your environment variables in place that we discussed in the <a href="http://brandontreb.com/beginning-jailbroken-ios-development-building-and-deployment/">last tutorial</a>.  If not, you will get errors.</p>

<p>Open the console, cd into the directory where you want to create your application and type the following command to create a new Tweak application.</p>

<p><div>
  <pre><code class='bash'>$THEOS/bin/nic.pl</code></pre>
</div>
</p>

<p>Now, when prompted select the number [5] for a tweak.  Next, you will enter all of the information about your project.  The resulting output should look like this:</p>

<p><div>
  <pre><code class='bash'>&lt;/p&gt;

&lt;h2&gt;NIC 1.0 - New Instance Creator&lt;/h2&gt;

&lt;p&gt;  [1.] iphone/application
  [2.] iphone/library
  [3.] iphone/preference_bundle
  [4.] iphone/tool
  [5.] iphone/tweak
Choose a Template (required): 5
Project Name (required): WelcomeWagon
Package Name [com.yourcompany.welcomewagon]:               &lt;br/&gt;
Author/Maintainer Name [Brandon Trebitowski]:
MobileSubstrate Bundle filter [com.apple.springboard]:
Instantiating iphone/tweak in welcomewagon/...
Done.</code></pre>
</div>
</p>

<h4>The Tweaks File</h4>

<p>Once your project has been created, you can open in up in your favorite editor.  I prefer TextMate.  Theos creates a file for you called Tweak.xm.  This is a special file that will run through theos's preprocessor in order to hook into the classes and methods that you specify.  So, rather than us having to write tons of boilerplate/crazy hook code, Theos does that all for us with a nice interface.</p>

<p>By default, EVERYTHING in that file is commented out.  It took me longer than I care to admit to figure that out when I created my first Jailbroken iOS app.</p>

<p><strong>The Preprocessor commands</strong></p>

<p>There are a few commands that you need to know in order to hook into a class:</p>

<p><strong>%hook and %end</strong></p>

<p><div>
  <pre><code class='objc'>%hook Springboard
// overwrite methods here
%end</code></pre>
</div>
</p>

<p>The first command is called %hook followed by the name of the class you are hooking in to.  You choose the methods to overwrite within the context of %hook className and %end. In the above code, we are saying that we want to hook into some methods in the SpringBoard class.</p>

<p><strong>%orig</strong></p>

<p>When inside a method, the %orig command will call the original method.  You can even pass arguments to the command like this %orig(arg1,arg2).  One thing to note is, if you don't call %orig, the original method will never be called.  So, if you hook SpringBoard's init command and fail to call %orig, SpringBoard will never start and your phone will be unusable until you delete your app via ssh.</p>

<h4>Hooking Into Springboard</h4>

<p>Open up Tweak.xm and add the following code.  Don't worry, I will explain it afterwards.</p>

<p><div>
  <pre><code class='objc'>&lt;/p&gt;

&lt;h1&gt;import &amp;lt;SpringBoard/SpringBoard.h&gt;&lt;/h1&gt;

&lt;p&gt;%hook SpringBoard&lt;/p&gt;

&lt;p&gt;-(void)applicationDidFinishLaunching:(id)application {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%orig;

UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;Welcome&quot; 
    message:@&quot;Welcome to your iPhone Brandon!&quot; 
    delegate:nil 
    cancelButtonTitle:@&quot;Thanks&quot; 
    otherButtonTitles:nil];
[alert show];
[alert release];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;%end</code></pre>
</div>
</p>

<p>OK, so what's going on here.  First, we import the Springboard.h header.  This will allow us access to springboard.  Next, we tell the preprocessor to hook into the Springboard class.</p>

<p>The method that we are overriding here is the applicationDidFinishLaunching: method.  This will of course fire right when SpringBoard starts up.  Notice that we make the %orig call.  If we omit this, our phone would never boot up properly as SpringBoard needs it's initialization method.</p>

<p>Finally, we just throw up a UIAlertView.  Again, not too exciting, but you get the point.</p>

<h4>Adding Additional Frameworks</h4>

<p>If you were to type build to build this project at this point you would see an error like this:</p>

<p><div>
  <pre><code class='bash'>Tweak.xm: In function ‘objc_object&lt;em&gt; $_ungrouped$SpringBoard$init(SpringBoard&lt;/em&gt;, objc_selector&lt;em&gt;)’:
Tweak.xm:6: error: declaration of ‘objc_object&lt;/em&gt; self’ shadows a parameter</code></pre>
</div>
</p>

<p>This is because we depend on the UIKit framework to show alerts.  In order to tell theos that we want to link in UIKit, we must create an addition to the Makefile.  Add the following line to your Makefile.</p>

<p><div>
  <pre><code class='bash'>WelcomeWagon_FRAMEWORKS = UIKit</code></pre>
</div>
</p>

<p>This will ensure that UIKit gets linked in.</p>

<h4>Building, Packaging, And Installing</h4>

<p>In the terminal, cd into your project's directory.  At this point, you can type make to simply build your project.  Theos has provided a nice way to automatically install your library on your device.  In order for it to work you must have the THEOS_DEVICE_IP environment variable set to your iPhone/iPod's IP address. This is explained in the <a href="http://brandontreb.com/beginning-jailbroken-ios-development-building-and-deployment/">previous tutorial</a>.</p>

<p>In the terminal type:</p>

<p><div>
  <pre><code class='bash'>make install</code></pre>
</div>
</p>

<p>This will build your tweak and install it on your device. When prompted to enter your password, the default is "alpine".  Also, make sure that SSH is installed on your device.</p>

<p>After installation, your device will respring and you will be greeted with your custom message like this:</p>

<p><img src="http://f.cl.ly/items/3J1W0j0c1F3y081P2D2i/IMG_0001.PNG" alt="Jailbroken App Development" /></p>

<h4>Conclusion</h4>

<p>You should now have a basic understand of how to patch any method inside of iOS.  With this knowledge, you can customize ANYTHING that you don't like about the device.  If you have any questions or comments, feel free to leave them in the comments section of this post.</p>

<p>You can download the source code for this tutorial <a href="http://cl.ly/1u0l0U0y2I0T1g2s3D0O">here</a>.</p>

<p>Happy Jailbreaking!</p>

<p><span style="font-family: 'Lucida Grande';"><strong><span style="font-weight: normal;"><span style="font-family: arial, verdana, tahoma, sans-serif; font-size: 13px; line-height: 20px;"><em>﻿﻿This post is part of <a style="text-decoration: none; color: #004199; padding: 0px; margin: 0px;" href="http://idevblogaday.com/">iDevBlogADay</a>, a group of indie iOS development blogs featuring two posts per day. You can keep up with iDevBlogADay through the <a style="text-decoration: none; color: #004199; padding: 0px; margin: 0px;" href="http://idevblogaday.com/">web site</a>, <a style="text-decoration: none; color: #004199; padding: 0px; margin: 0px;" href="http://feeds.feedburner.com/idevblogaday">RSS feed</a>, or <a style="text-decoration: none; color: #004199; padding: 0px; margin: 0px;" href="http://twitter.com/#search?q=%23idevblogaday">Twitter</a>.</em></span></span></strong></span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2D Tutorial - Dynamically Coloring Sprites]]></title>
    <link href="http://brandontreb.com/Cocos2D-Tutorial-Dynamically-Coloring-Sprites/"/>
    <updated>2011-07-30T17:05:00-06:00</updated>
    <id>http://brandontreb.com/Cocos2D-Tutorial-Dynamically-Coloring-Sprites</id>
    <content type="html"><![CDATA[<p><img src="http://f.cl.ly/items/42231G3d1P3d1b3H2Q2g/Screen%20shot%202011-07-30%20at%204.39.28%20PM.png" alt="Custom Bitizens" /></p>

<p>Have you ever seen a game (such as Tiny Tower) that contains similar sprites that only vary by certain attributes (coloring, shading, accessories, etc...)?  I would often wonder how long it would take the artists to create each permutation of these sprites.  After discovering that you can call a method on a CCSprite called setColor, I realized how most of this customization is done in code.</p>

<p>This tutorial will be a continuation of my last post about <a href="http://brandontreb.com/Pixel-Art-Character-Tutorial-Create-A-Bitizen">creating your own Bitizen in Photoshop</a>.  So, if you don't already have a Bitizen character to work with, I suggest you follow that tutorial OR download my template <a href="http://cl.ly/2u3h0g2F2H2b1S280519/bitizen.psd">here</a>.</p>

<h4>White Out</h4>

<p>As I mentioned above, we are going to be using the setColor method of CCSprite to dynamically color each part of our Bitizen.  The way it works is each pixel's color is multiplied by the value passed into setColor giving it a "tint".  So, pixels that are all white will be fully tinted and pixels that are all black will have no change.</p>

<p>So, our first goal is to create an "all white" version of our Bitizen.  Don't worry about shading for now, I will cover that in a moment.  I just started with our Bitizen as a base and created new layers for each of the "white" components.</p>

<p>You should end up with 5 new layers:</p>

<ul>
<li>white-head</li>
<li>white-skin</li>
<li>white-hair</li>
<li>white-pants</li>
<li>white-shoes</li>
</ul>


<p>For each layer, trace over the corresponding colored layer.  For the "white-skin" layer, make sure to trace over the hands as well as the face.  This will ensure that your Bitizen's color is consistent.  When you are done, your Bitizen should look something like this:</p>

<p><img src="http://f.cl.ly/items/0Z08222Z1v233i1G3H1o/Screen%20shot%202011-07-30%20at%204.52.03%20PM.png" alt="White Bitizen" /></p>

<p>Looks pretty bland... The next step is to add our shading.  We will be using only black with varying alpha in order to achieve the desired shading.  So, make sure to play with it a bit and get the shading to your liking. Add a new shading layer for each component (or simply draw on top of the current layer with the black pencil).</p>

<p>Your bitizen should look something like this after doing all of the shading:</p>

<p><img src="http://f.cl.ly/items/3f2P3F1b2Z1y1W0W2V3V/Screen%20shot%202011-07-30%20at%203.47.09%20PM.png" alt="Shaded Bitzen" /></p>

<h4>Chop It Up</h4>

<p>The final thing we need to do with our graphic is chop up the pieces so that they can be individually colored.  Convert each of the white-* layers to Smart Objects, copy them to a new document, and save them.  You should end up with 5 .png files (head.png,skin.png,hair.png,pants.png,shoes.png).</p>

<p>I increased the size of my Bitizen by 4 before doing this step.  You might consider increasing their size as well.  Remember that the size increase you choose will change some of the values when we recreate the Bitizen in Cocos2D.  So, if you want to follow along, make sure your Bitizen is 60x100 before exporting the various parts.</p>

<p>One thing to note is we are going to bring these into Cocos2D as 5 different sprites.  There are some optimizations that you could do using sprite sheets, however I want to make things as clear as possible.  So, we are going the long way.</p>

<p><a href="http://cl.ly/1I102a1F2L323C1R2Y2h">You can download my completed white bitizen here</a>.</p>

<h4>Rebuilding The Bitizen In Cocos2D</h4>

<p>Once you have imported the 5 Bitizen image files into Cocos2D, you need to reconstruct them in code.  This involves adding each sprite to the layer.</p>

<p>Here is the code to display the skin/head+hands in our layer.  As a note, I simply created a new Cocos2D project and am using the retina only mode for my display using [director enableRetinaDisplay:YES].  The offsets will change quite a bit if you are choosing to support non-retina.</p>

<p><div>
  <pre><code class='objc'>int spriteX = 240;
int spriteY = 160;&lt;/p&gt;

&lt;p&gt;CCSprite *skin = [CCSprite spriteWithFile:@&quot;skin.png&quot;];
[skin setPosition:ccp(spriteX, spriteY)];
[self addChild:skin];</code></pre>
</div>
</p>

<p>This will draw our white(shaded) head on the screen.  That's pretty boring so let's draw the rest of the body.  Update your code to look like the following:</p>

<p><div>
  <pre><code class='objc'>int spriteX = 240;
int spriteY = 160;&lt;/p&gt;

&lt;p&gt;CCSprite *skin = [CCSprite spriteWithFile:@&quot;skin.png&quot;];
[skin setPosition:ccp(spriteX, spriteY)];
[self addChild:skin];&lt;/p&gt;

&lt;p&gt;int hairOffset = 11;&lt;/p&gt;

&lt;p&gt;CCSprite *hair = [CCSprite spriteWithFile:@&quot;hair.png&quot;];
[hair setPosition:ccp(spriteX, spriteY+hairOffset)];
[self addChild:hair];&lt;/p&gt;

&lt;p&gt;int shirtYOffset = -9;
int shirtXOffset = 1;&lt;/p&gt;

&lt;p&gt;CCSprite *shirt = [CCSprite spriteWithFile:@&quot;shirt.png&quot;];
[shirt setPosition:ccp(spriteX + shirtXOffset, spriteY+shirtYOffset)];
[self addChild:shirt];&lt;/p&gt;

&lt;p&gt;int pantsYOffset = -15;
int pantsXOffset = 1;&lt;/p&gt;

&lt;p&gt;CCSprite *pants = [CCSprite spriteWithFile:@&quot;pants.png&quot;];
[pants setPosition:ccp(spriteX + pantsXOffset, spriteY+pantsYOffset)];
[self addChild:pants];&lt;/p&gt;

&lt;p&gt;int shoesYOffset = -17;
int shoesXOffset = 1;&lt;/p&gt;

&lt;p&gt;CCSprite *shoes = [CCSprite spriteWithFile:@&quot;shoes.png&quot;];
[shoes setPosition:ccp(spriteX + shoesXOffset, spriteY+shoesYOffset)];
[self addChild:shoes];</code></pre>
</div>
</p>

<p>Now, you should see the lonely ghost of a Bitizen standing in the center of your screen.</p>

<p><img src="http://f.cl.ly/items/090s2v0F1B3d3k3v3V1R/Screen%20shot%202011-07-30%20at%205.10.34%20PM.png" alt="Ghost Bitizen" /></p>

<p>Still boring... Time to spice him up with some color.</p>

<h4>Tinting Cocos2D Sprites</h4>

<p>As I mentioned before, tinting Cocos2D sprites is very simple. I would recommend keeping all sprites that you wish to tint a shade of white/gray otherwise some crazy things will happen.</p>

<p>The setColor method takes an array of integers from 0-255.  This array contains 3 numbers (1st for red, 2nd for green, 3rd for blue). For example, we can pass all <font color="red">Red</font> to the setColor method by sending it {255,0,0}.</p>

<p>Let's start by tinting our Bitizen's shirt a random color.  Change the code that displays the shirt to look like this:</p>

<p><div>
  <pre><code class='objc'>CCSprite *shirt = [CCSprite spriteWithFile:@&quot;shirt.png&quot;];
[shirt setPosition:ccp(spriteX + shirtXOffset, spriteY+shirtYOffset)];
ccColor3B shirtColor = {arc4random() % 255,arc4random() % 255,arc4random() % 255};
[shirt setColor:shirtColor];
[self addChild:shirt];</code></pre>
</div>
</p>

<p>Now, every time you run the application, the Bitizen should have a different shirt color.  You can apply this principle to each of your sprites to completely customize your Bitizen.</p>

<p>What if you only want to limit certain colors? (you ask).  Well, that's a great question. I solved this by creating an array of ccColor3Bs.  Basically an array of arrays.  And then I index into this array and set the color accordingly.  Here is an example of setting a random skin color to avoid having blue people (unless maybe you are making Smurfs).</p>

<p><div>
  <pre><code class='objc'>ccColor3B skinColors[] = {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{247,224,194},
{255,232,214},
{136,119,82},
{245,232,205},
{144,110,38}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;};
CCSprite *skin = [CCSprite spriteWithFile:@&quot;skin.png&quot;];
[skin setPosition:ccp(spriteX, spriteY)];
ccColor3B skinColor = skinColors[arc4random() % 5];
[skin setColor:skinColor];
[self addChild:skin];</code></pre>
</div>
</p>

<p>I have an array of 5 different arrays and randomly index into it using skinColors[arc4random() % 5].  This will give me a random color within my skin color group.</p>

<p>After running this through a loop and adding random colors to some of the other sprites, I ended up creating the image you see at the top of this post.</p>

<h4>Conclusion</h4>

<p>I hope that this tutorial has found you well and I have demystified the magic that is dynamic sprites.  You may download the source code for this tutorial (include the code to generate the screenshot above) <a href="http://cl.ly/3h3R2D1p2w2y2X3t0R32">here</a>.</p>

<p>If you have any questions or comments, please feel free to leave them in the comments section of this post.  Also, make sure you <a href="http://feeds.feedburner.com/brandontreb">subscribe to my RSS feed</a> for more great tutorials!</p>

<p>Happy Coding!</p>

<p><span style="font-family: 'Lucida Grande';"><strong><span style="font-weight: normal;"><span style="font-family: arial, verdana, tahoma, sans-serif; font-size: 13px; line-height: 20px;"><em>﻿﻿This post is part of <a style="text-decoration: none; color: #004199; padding: 0px; margin: 0px;" href="http://idevblogaday.com/">iDevBlogADay</a>, a group of indie iOS development blogs featuring two posts per day. You can keep up with iDevBlogADay through the <a style="text-decoration: none; color: #004199; padding: 0px; margin: 0px;" href="http://idevblogaday.com/">web site</a>, <a style="text-decoration: none; color: #004199; padding: 0px; margin: 0px;" href="http://feeds.feedburner.com/idevblogaday">RSS feed</a>, or <a style="text-decoration: none; color: #004199; padding: 0px; margin: 0px;" href="http://twitter.com/#search?q=%23idevblogaday">Twitter</a>.</em></span></span></strong></span></p>
]]></content>
  </entry>
  
</feed>
